# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: KanHub API
  description: helloworld
  version: "1.0.0"
# the domain of the service
host: localhost:8080
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api
produces:
  - application/json
paths:
  /repository/{repository_name}/teams:
    get:
      summary: Teams in repository
      description: Gives you the teams in the repository.
      parameters:
        - name: repository_name
          in: path
          description: Name of repository
          required: true
          type: string
          
      tags:
        - Teams
      responses:
        200:
          description: An array of teams in the repo
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
    post:
      summary: Creating a new team in the repo
      parameters:
        - name: repository_name
          in: path
          description: Name of repository
          required: true
          type: string
        - name: body
          in: body
          description: Team
          required: true
          schema: 
            $ref: '#/definitions/RawTeam'
      tags:
        - Teams
      responses:
        200:
          description: Newly created team
          schema:
            $ref: '#/definitions/Team'
        400:
          description: Team already exists
          schema:
            $ref: '#/definitions/Error'

  /repository/{repository_name}/teams/{team_id}:
    put:
      summary: Updates a team's displayName or description
      parameters:
        - name: repository_name
          in: path
          description: Name of repository
          required: true
          type: string
        - name: team_id
          in: path
          description: Team Id
          required: true
          type: string
        - name: body
          int: body
          description: Team
          required: true
          schema:
            $ref: '#/definitions/RawTeam'
      tags:
        - Teams
      responses:
        200:
          description: Successfully updated team
        400:
          description: Team already exists
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a team from a repository
      parameters:
        - name: repository_name
          in: path
          description: Name of repository
          required: true
          type: string
        - name: team_id
          in: path
          description: Team Id
          required: true
          type: string
      tags:
        - Teams
      responses:
        200:
          description: Successfully updated team
        400:
          description: Team already exists
          schema:
            $ref: '#/definitions/Error'
definitions:
  RawTeam:
    type: object
    properties:
      displayName:
        type: string
        description: Team Name
      repository:
        type: string
        description: Repository that the team belongs to
      description:
        type: string
        description: Description of the team
  Team:
    type: object
    properties:
      id:
        type: string
        description: Unique id
      displayName:
        type: string
        description: Team Name
      repository:
        type: string
        description: Repository that the team belongs to
      description:
        type: string
        description: Description of the team
  Error:
    type: object
    properties:
      success:
        type: boolean
        description: API call status
      code:
        type: string
        description: TEAM_DOES_NOT_EXIST
